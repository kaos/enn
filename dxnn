#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pa ebin

main([]) -> usage();
main(Xs) ->
    Seed = now(),
    io:format("Initializing random with seed: ~p~n", [Seed]),
    random:seed(now()),
    run(Xs).

usage() -> io:format("Usage: ~s [1|2|3|...]~n", [escript:script_name()]).

run([X|Xs]) ->
    test(X),
    flush(X),
    run(Xs);
run([]) ->
    io:format("Done.~n").

flush(X) ->
    receive
        Msg ->
            io:format("[~s] got message: ~p~n", [X, Msg]),
            flush(X)
    after 100 ->
            ok
    end.


%% 6.1
test("1") ->
    io:format("6.1 simple neuron test~n"),
    N = enn_node:new({neuron, [#{}]}),
    ok = enn_node:add_source(N, self(), random),
    ok = enn_node:add_target(N, self()),
    ok = enn_node:activate(N, 1),
    receive
        {N, activity, A} ->
            io:format("Output: ~p~n", [A])
    after 1000 ->
            io:format("No activity!~n")
    end;

%% 6.2
test("2") ->
    io:format("6.2 simple nn test~n"),
    #{ {1, 1} := Node } =
        enn_network:load(
          [[#{ id => {1, 1}, type => {neuron, [#{}]}, sources => [{me, random}] }]],
          #{ me => self() }),

    %% add our selves as target for the node
    enn_node:add_target(Node, self()),

    %% activate the node
    io:format("activate node ~p~n", [Node]),
    enn_node:activate(Node, random),
    receive
        {Node, activity, A} ->
            io:format("got node activity: ~p~n", [A])
        after 1000 ->
                io:format("missing node activity.. :/~n")
    end;

test("3") ->
    io:format("6.2 simple nn test, Mk-II~n"),
    #{ {1, 1} := S } =
        enn_network:new(
          #{
             layers => [#{ count => 1, type => {sensor, [rng]} },
                        #{ count => 1, type => {neuron, [#{}]} },
                        #{ count => 1, type => {actuator, [stdout]} }]
           }),
    S ! update;

%% 6.6
test("4") ->
    io:format("6.6 genotype <-> phenotype mapping~n"),
    PhenoType =
        enn_network:new(
          #{
             layers => [#{ count => 1, type => {sensor, [rng]} },
                        %% 3 layers with 1, 3, 1 nodes per layer
                        #{ count => [1, 3, 1], type => {neuron, [#{}]} },
                        #{ count => 1, type => {actuator, [stdout]} }]
           }),
    GenoType = enn_network:backup(PhenoType),
    io:format("PhenoType: ~p~nGenoType: ~p~n", [PhenoType, GenoType]);

%% 7.6.5
test("5") ->
    io:format("7.6.5 \"hellow world\" of NN problem, the XOR operation (with fixed weights; still, no learning)~n"),
    #{ 1 := [X1, X2] } = NN =
        enn_network:load([[#{ id => {1, 1}, type => {sensor, [msg]} },
                           #{ id => {1, 2}, type => {sensor, [msg]} }],
                          [#{ id => {2, 1}, type => {neuron, [#{ af => hardlim, bias => -0.01 }]}, sources => [{{1, 1}, 1}] },
                           #{ id => {2, 1}, type => {neuron, [#{ af => hardlim, bias => -0.01 }]}, sources => [{{1, 2}, 1}] }],
                          [#{ id => {3, 1}, type => {neuron, [#{ af => hardlim, bias => -0.01, thld => 0.5 }]}, sources => [{2, 0.4}] }],
                          [#{ id => {4, 1}, type => {neuron, [#{ af => hardlim, bias => -0.01, thld => 0.5 }]}, sources => [{2, 0.7}, {3, -1.0}] }],
                          [#{ id => {5, 1}, type => {actuator, [stdout]}, sources => [{4, random}] }]
                         ]),
    io:format("Phenotype: ~p~n~n", [NN]),
    [begin
         X1 ! {input, V1}, X2 ! {input, V2},
         receive after 100 ->
                         io:format("applied input ~p : ~p~n", [V1, V2])
                 end
     end || {V1, V2} <- [{0, 0}, {0, 1}, {1, 0}, {1, 1}]];

test("6") ->
    io:format("7.6.5 \"hellow world\" of NN problem, the XOR operation (with fixed weights; still, no learning) using enn_env to interact with the network~n"),
    NN =
        enn_network:load([[#{ id => {1, 1}, type => {sensor, [{env, x1}]} },
                           #{ id => {1, 2}, type => {sensor, [{env, x2}]} }],
                          [#{ id => {2, 1}, type => {neuron, [#{ af => hardlim, bias => -0.01 }]}, sources => [{{1, 1}, 1}] },
                           #{ id => {2, 1}, type => {neuron, [#{ af => hardlim, bias => -0.01 }]}, sources => [{{1, 2}, 1}] }],
                          [#{ id => {3, 1}, type => {neuron, [#{ af => hardlim, bias => -0.01, thld => 0.5 }]}, sources => [{2, 0.4}] }],
                          [#{ id => {4, 1}, type => {neuron, [#{ af => hardlim, bias => -0.01, thld => 0.5 }]}, sources => [{2, 0.7}, {3, -1.0}] }],
                          [#{ id => {5, 1}, type => {actuator, [{env, y}]}, sources => [{4, 1.0}] }]
                         ]),
    io:format("Phenotype: ~p~n~n", [NN]),
    Env = enn_env:new(),
    ok = enn_env:connect(NN, Env),
    ok = enn_env:connect(self(), y, Env),
    [begin
         io:format("apply input: ~p,~p~n", [V1, V2]),
         enn_env:update(x1, V1, Env),
         enn_env:update(x2, V2, Env),
         receive
             {Env, env, y, Y} ->
                 io:format("output: ~p xor ~p = ~p~n", [V1, V2, Y])
         after 100 ->
                 io:format("no change in environment for y..~n")
         end
     end || {V1, V2} <- [{0, 0}, {0, 1}, {1, 0}, {1, 1}]];

test(X) -> io:format("Unknown test: ~p~n", [X]).
