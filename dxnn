#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pa ebin

main([]) -> usage();
main(Xs) ->
    Seed = now(),
    io:format("Initializing random with seed: ~p~n", [Seed]),
    random:seed(now()),
    run(Xs).

usage() -> io:format("Usage: ~s [1|2|3|...]~n", [escript:script_name()]).

run([X|Xs]) ->
    test(X),
    flush(X),
    run(Xs);
run([]) ->
    io:format("Done.~n").

flush(X) ->
    receive
        Msg ->
            io:format("[~s] got message: ~p~n", [X, Msg]),
            flush(X)
    after 100 ->
            ok
    end.

test("1") -> test_1();
test("2") -> test_2();
test("3") -> test_3();
test("4") -> test_4();
test(X) -> io:format("Unknown test: ~p~n", [X]).


%% 6.1
test_1() ->
    io:format("6.1 simple neuron test~n"),
    N = enn_node:new({neuron, [#{}]}),
    ok = enn_node:add_source(N, self(), random),
    ok = enn_node:add_target(N, self()),
    ok = enn_node:activate(N, 1),
    receive
        {N, activity, A} ->
            io:format("Output: ~p~n", [A])
    after 1000 ->
            io:format("No activity!~n")
    end.

%% 6.2
test_2() ->
    io:format("6.2 simple nn test~n"),
    #{ {1, 1} := Node } =
        enn_network:load(
          [[#{ id => {1, 1}, type => {neuron, [#{}]}, sources => [{me, random}] }]],
          #{ me => self() }),

    %% add our selves as target for the node
    enn_node:add_target(Node, self()),

    %% activate the node
    io:format("activate node ~p~n", [Node]),
    enn_node:activate(Node, random),
    receive
        {Node, activity, A} ->
            io:format("got node activity: ~p~n", [A])
        after 1000 ->
                io:format("missing node activity.. :/~n")
    end.

test_3() ->
    io:format("6.2 simple nn test, Mk-II~n"),
    #{ {1, 1} := S } =
        enn_network:new(
          #{
             layers => [#{ count => 1, type => {sensor, [rng]} },
                        #{ count => 1, type => {neuron, [#{}]} },
                        #{ count => 1, type => {actuator, [stdout]} }]
           }),
    S ! update.

%% 6.6
test_4() ->
    io:format("6.6 genotype <-> phenotype mapping~n"),
    PhenoType =
        enn_network:new(
          #{
             layers => [#{ count => 1, type => {sensor, [rng]} },
                        %% 3 layers with 1, 3, 1 nodes per layer
                        #{ count => [1, 3, 1], type => {neuron, [#{}]} },
                        #{ count => 1, type => {actuator, [stdout]} }]
           }),
    GenoType = enn_network:backup(PhenoType),
    io:format("PhenoType: ~p~nGenoType: ~p~n", [PhenoType, GenoType]).
